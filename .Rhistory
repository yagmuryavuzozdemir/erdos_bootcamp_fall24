combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.85, 0.15),  # Position the legend at the bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.6),  # Add black axis lines
legend.position = c(0.9, 0.2),  # Position the legend at the bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.6),  # Add black axis lines
legend.position = c(0.9, 0),  # Position the legend at the bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.85, 0.15),  # Position the legend at the bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),legend.text = element_text(size = 9)
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.85, 0.15),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 14, face = "bold"),  # Bigger title
legend.text = element_text(size = 12)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.9, 0.1),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 14, face = "bold"),  # Bigger title
legend.text = element_text(size = 12)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.91, 0.09),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 14, face = "bold"),  # Bigger title
legend.text = element_text(size = 12)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.9, 0.09),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 14, face = "bold"),  # Bigger title
legend.text = element_text(size = 12)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.8, 0.2),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 14, face = "bold"),  # Bigger title
legend.text = element_text(size = 12)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.85, 0.2),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 14, face = "bold"),  # Bigger title
legend.text = element_text(size = 12)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
# Combined plot
combined_plot <- ggplot() +
geom_line(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 0.6) +
geom_point(data = data1, aes(x = x, y = eigen, color = "Eigen"), size = 1.5) +
geom_line(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 0.6) +
geom_point(data = data2, aes(x = x, y = freq, color = "Frequency"), size = 1.5) +
scale_color_manual(values = c("Eigen" = "darkgreen", "Frequency" = "darksalmon")) +
labs(title = "", x = "Betas", y = "", color = "Test statistics") +
theme_minimal()+ theme(
panel.border = element_blank(),  # Remove the default panel border
axis.line = element_line(color = "black", size = 0.4),  # Add black axis lines
legend.position = c(0.85, 0.2),  # Position legend in bottom-right corner
legend.background = element_rect(fill = "white", color = "black"),
legend.title = element_text(size = 10, face = "bold"),  # Bigger title
legend.text = element_text(size = 10)  # Bigger legend items
)
# Print combined plot
print(combined_plot)
set.seed(1)
n <- 2000
p <- 300
set.seed(1)
beta = round(c(rnorm(5, 3, 16), rep(0, p - 5)))
beta = round(c(rnorm(15, 3, 16), rep(0, p - 5)))
n <- 2000
p <- 300
set.seed(1)
beta = round(c(rnorm(15, 3, 16), rep(0, p - 5)))
beta = round(c(rnorm(15, 3, 16), rep(0, p - 15)))
beta = round(c(rnorm(15, 3, 9), rep(0, p - 15)))
set.seed(1)
beta = round(c(rnorm(15, 3, 9), rep(0, p - 15)))
b=1
set.seed(b)
X <- matrix(rnorm(n * p, 0, sqrt(1/p)), nrow = n, ncol = p)
z <- 1 + X%*%beta
pr <- 1/(1 + exp(-z)) # check with plot(z, pr)
plot(z, pr)
y <- as.factor(rbinom(n, 1, pr))
library(dplyr)
library(gdata)
library(igraph)
library(MASS)
library(DescTools)
library(caret)
library(glmnet)
swag <- function(y, X, p_max, q, m = choose(floor(q*ncol(X)), 2), family = "gaussian", eval_func = AIC, seed = 123) {
# Input validation
if(p_max > ncol(X)) stop("p_max is larger than the number of predictors")
p <- ncol(X)
index_screen <- 1:p
# Initialize result storage
criteria <- vector("list", p_max)
group <- vector("list", p_max)
selected_group <- vector("list", p_max)
####################################
# Screening Step
####################################
# Vectorized model fitting for the first step
crit <- sapply(index_screen, function(i) {
fit <- glm(y ~ X[, i], family = family)
eval_func(fit)
})
criteria[[1]] <- crit
group[[1]] <- seq_along(crit)
# Identify top models by quantile threshold
id_screening <- selected_group[[1]] <- which(crit <= quantile(crit, q))
####################################
# General Step
####################################
for(d in 2:p_max) {
id_row <- selected_group[[d - 1]]  # Models from previous step with smaller error
if(d == 2) {
id_var <- group[[d - 1]][id_row]
nrv <- length(id_var)
} else {
id_var <- group[[d - 1]][id_row, , drop = FALSE]
nrv <- if (is.matrix(id_var)) nrow(id_var) else 1
}
# Build all possible models of size d
A <- matrix(nr = nrv * length(id_screening), nc = d)
A[, 1:(d - 1)] <- kronecker(cbind(rep(1, length(id_screening))), id_var)
A[, d] <- rep(id_screening, each = nrv)
# Unique combinations of variables, avoiding duplicates
var_mat <- unique(t(apply(A, 1, sort)))
# Remove models with duplicate variables
var_mat <- var_mat[apply(var_mat, 1, function(row) length(unique(row)) == d), , drop = FALSE]
# Randomly select a subset of models if necessary
if(nrow(var_mat) > m) {
set.seed(seed + d)
group[[d]] <- var_mat[sample.int(nrow(var_mat), m), , drop = FALSE]
} else {
group[[d]] <- var_mat
}
var_mat <- group[[d]]
# Handle case when var_mat is a single row (treated as a vector)
if (nrow(var_mat) == 1) {
crit <- eval_func(glm(y ~ X[, var_mat], family = family))
} else {
crit <- sapply(1:nrow(var_mat), function(i) {
fit <- glm(y ~ X[, var_mat[i, ]], family = family)
eval_func(fit)
})
}
criteria[[d]] <- na.omit(crit)
selected_group[[d]] <- which(crit <= quantile(crit, probs = q, na.rm = TRUE))
}
# Return results as a list and assign class "swag"
out <- list("group" = group, "selected_group" = selected_group,
"criteria" = criteria, "id_screening" = id_screening, "p_max" = p_max)
class(out) <- "swag"
return(out)
}
plot.swag <- function(obj) {
require(plotrix)
m_vector <- sapply(obj$criteria, function(x) summary(x)[4])
l_vector <- sapply(obj$criteria, function(x) summary(x)[1])
u_vector <- sapply(obj$criteria, function(x) summary(x)[6])
plotCI(1:length(obj$criteria), m_vector, ui = u_vector, li = l_vector, scol = "grey", col="red", pch = 16, main = "Ranges of criterion", ylab = "Range", xlab = "Model Size")
}
swag_network <- function(obj, mode = "undirected", weighted = F, show_net = T) {
require(plyr)
require(igraph)
require(gdata)
selected_ind <- list()
selected_ind[[1]] <- obj$group[[1]][obj$selected_group[[1]]]
for(i in 2:obj$p_max) {
if(length(obj$selected_group[[i]]) != 1) {
selected_ind[[i]] <- obj$group[[i]][as.matrix(obj$selected_group[[i]]), ]
} else {
selected_ind[[i]] <- t(as.matrix(obj$group[[i]][obj$selected_group[[i]], ]))
}
}
models <- rbind.fill.matrix(selected_ind)
E <- matrix(NA, ncol = 3, nrow = choose(length(obj$id_screening), 2))
E[, 1:2] <- t(combn(obj$id_screening, 2))
E[,3] <- 0
for(j in 1:nrow(E)) {
for(i in 1:nrow(models)) {
if(sum(E[j, 1:2] %in% models[i, ]) == 2) {
E[j, 3] <- E[j, 3] + 1
}
}
}
#### intensity matrix
selected_var <- c()
for(i in 1:ncol(models)) {
selected_var <- c(selected_var, models[, i])
}
selected_var <- sort(na.omit(unique(selected_var)))
A <- matrix(0, nrow = ncol(models), ncol = ncol(models))
intensity <- matrix(0, nrow = length(selected_var), ncol = length(selected_var))
a <- list()
for(i in 1:(length(selected_var) - 1)) {
for(j in (i + 1):length(selected_var)) {
for(k in 1:(ncol(models) - 1)) {
a[[i]] <- which(models[, k] == selected_var[i])
for(n in (k + 1):(ncol(models))) {
A[k, n] <- length(which(models[a[[i]], n] == selected_var[j]))
}
}
intensity[j, i] <- intensity[i, j] <- sum(A)
}
}
colnames(intensity) <- obj$id_screening
rownames(intensity) <- obj$id_screening
#relation matrix for pairwise connection
relation_mat = matrix(NA, nrow = choose(length(selected_var),2), ncol = 3)
c = rep(selected_var[1],length(selected_var)-1)
for(i in (length(selected_var)-2):1){
a = rep(selected_var[length(selected_var)-i],i)
c = c(c,a)
}
relation_mat[,1]=c
bb = selected_var[-1]
for(i in 3:length(selected_var)){
b1 = selected_var[i:length(selected_var)]
bb = c(bb,b1)
}
relation_mat[,2]=bb
relation_mat[,3] = upperTriangle(intensity,byrow = T)
g <- graph_from_adjacency_matrix(intensity, mode = mode, weighted = NULL)
if(show_net == T) plot(g)
return(list(g = g, models = models))
}
# Observed SWAG results
swag_obs <- swag(y, X, p_max = 20, q = .1, family = "binomial")
net_obs <- swag_network(swag_obs, show_net = T)
edge_list_with_counts = list()
d = c(-3.2, 1.4, -2.6, -5.6, -0.9, -4.2, -0.7, -2.7)
mean(d)
sd(d)
?t.test
t.test(d, alternative = "less")
mean(d)
sd(d)
t.test(d, alternative = "less")
1.07/(1.51/4)
pt(2.834437, df = 15, lower.tail = "FALSE")
1-pt(2.834437, df = 15, lower.tail = "FALSE")
49.5-53.1
51-49.5
46.6-48.3
49.6-54.8
edge_list_with_counts = list()
degree_obs = list()
freq = list()
common_features = list()
# Compute statistics from swag_obs and net_obs
edge_counts <- count_multiple(net_obs$g)
# Add the edge counts as an attribute to the edges of the graph
E(net_obs$g)$weight <- edge_counts
# Get a summary of edges with their counts (relation_mat, thickness)
edge_list_with_counts[[b]] <- as.data.frame(get.edgelist(net_obs$g))
edge_list_with_counts[[b]]$weight <- edge_counts
edge_list_with_counts[[b]] = unique(edge_list_with_counts[[b]])
degree_obs[[b]] <- degree(net_obs$g)
### Frequency table
frequency = table(net_obs$models)
variable = swag_obs$id_screening
freq[[b]] = cbind(variable,frequency)
freq[[b]] = freq[[b]][order(-freq[[b]][, "frequency"]), ]
common_features[[b]] = intersect(true_var,V(net_obs$g))
true_var = c(1:15)
common_features[[b]] = intersect(true_var,V(net_obs$g))
View(common_features)
#### How many observed in most frequent variables #####
count_in_observed_freq[[b]] = sum(unique(freq[[b]][,1])[1:15] %in% true_var)
#### How many observed in most frequent variables #####
count_in_observed_freq[[b]] = sum(unique(freq[[b]][,1])[1:15] %in% true_var)
count_in_observed_freq = list()
sign_betas = list()
#### How many observed in most frequent variables #####
count_in_observed_freq[[b]] = sum(unique(freq[[b]][,1])[1:15] %in% true_var)
View(count_in_observed_freq)
library(jsonlite)
# Load the JSON file
selected_column_names <- fromJSON("selected_column_names.json")
setwd("C:/Users/yagmu/OneDrive/erdos_project/erdos_bootcamp_fall24")
# Load the JSON file
selected_column_names <- fromJSON("selected_column_names.json")
names = read.csv("C:/Users/yagmu/Downloads.channels_125.csv")
names = read.csv("C:/Users/yagmu/Downloads/channels_125.csv")
View(names)
View(names)
selected_column_names = as.numeric(selected_column_names)
# Load the JSON file
selected_column_names <- fromJSON("selected_column_names.json")
str(selected_column_names)
clean_string = rep(NA, 189)
clean_string = rep(NA, 189)
for(i in 1:189){
clean_string[i] <- gsub("'", "", selected_column_names[i])
}
# Split the string by comma
result = rep(NA, 189)
for(i in 1:189){
result[i] <- strsplit(clean_string[i], ",")[[1]]
}
# Split the string by comma
result = matrix(NA,nrow= 189, ncol = 2)
# Split the string by comma
result = matrix(NA,nrow= 189, ncol = 2)
for(i in 1:189){
result[i,] <- strsplit(clean_string[i], ",")[[1]]
}
View(result)
library(readxl)
train_data <- read_excel("train_data.csv")
dataname = read.csv("C:/Users/yagmu/OneDrive/erdos_project/erdos_bootcamp_fall24/test_data.csv")
View(dataname)
cols = dataname$Paths
cols = dataname$Paths[-1]
str(result)
str(names)
result = as.numeric(result)
View(dataname)
rm(dataname)
rm(cols)
selecteds = unique(result)
selecteds = order(unique(result))
# Split the string by comma
result = matrix(NA,nrow= 189, ncol = 2)
for(i in 1:189){
result[i,] <- strsplit(clean_string[i], ",")[[1]]
}
result = as.numeric(result)
selecteds = sort(unique(result))
selecteds
a = rep(NA, 109)
a = rep(NA, 109)
for(i in 1:109){
for(i in 1:109){
}
''
....
)))
for(i in 1:109){
i=1
b = which(names$Channel.no.==selecteds[i]]
b = which(names$Channel.no.==selecteds[i]])
b = which(names$Channel.no.==selecteds[i])
selecteds[i]
i=1
selecteds[i]
b = which(names$Channel.no.==selecteds[i])
a = rep(NA, 109)
for(i in 1:109){
b = which(names$Channel.no.==selecteds[i])
a[i] = names$Channel.region..brief.[b]
}
a
cleans = rep(NA. 109)
cleans = rep(NA. 109)
for(i in 1:109){
cleans[i] <- gsub("'", "", a[i])
}
cleans = rep(NA. 109)
cleans = rep(NA, 109)
for(i in 1:109){
cleans[i] <- gsub("'", "", a[i])
}
a[1]
cleans[1]
strsplit(cleans[1], "_")[[1]][1]
regions = c()
regions = rep(NA, 109)
for(i in 1:109){
regions[i] <- strsplit(cleans[i], "_")[[1]][1]
}
regions = unique(regions)
regions
regions = rep(NA, 109)
for(i in 1:109){
regions[i] <- strsplit(cleans[i], "_")[[1]][1]
}
table(regions)
regions
aa =table(regions)
aa =as.data.frame(table(regions))
View(aa)
